{
  "title": "Carousel",
  "entity_component": {
    "_": {
      "name": "Carousel"
    }
  },
  "config": {
    "abort": {
      "already_configured": "Device is already configured"
    },
    "error": {
      "missing_selection": "No entities selected",
      "unknown": "Unexpected error"
    },
    "step": {
      "user": {
        "title": "Carousel helper",
        "description": "The carousel helper allows you to create a sensor which rotate between the chosen entities.",
        "menu_options": {
          "binary_sensor": "Add binary sensor carousel",
          "camera": "Add camera carousel",
          "sensor": "Add sensor carousel"
        }
      },
      "sensor": {
        "title": "Carousel helper",
        "data": {
          "name": "Sensor carousel name",
          "entity_ids": "Entities this sensor tracks",
          "icon": "Icon",
          "rotate_every_minutes": "Rotate sensors every minutes",
          "listen_to_timer_trigger": "Or use a Timer helper as rotate trigger",
          "restart_timer": "Restart Timer helper automatic",
          "show_if_template": "Show if template"
        },
        "data_description": {
          "icon": "If icon is not filled out, the icon from the tracked entities is used.",
          "show_if_template": "If the entities has the same state/attribute type, a template can be used to decide if current entity should be shown. Values = state and dict state_attributes."
        }
      },
      "binary_sensor": {
        "title": "Carousel helper",
        "data": {
          "name": "Binary Sensor carousel name",
          "entity_ids": "Entities this binary sensor tracks",
          "icon": "Icon",
          "rotate_every_minutes": "Rotate binary sensors every minutes",
          "listen_to_timer_trigger": "Or use a Timer helper as rotate trigger",
          "restart_timer": "Restart Timer helper automatic",
          "show_if_template": "Show if template"
        },
        "data_description": {
          "icon": "If icon is not filled out, the icon from the tracked entities is used.",
          "show_if_template": "If the entities has the same state/attribute type, a template can be used to decide if current entity should be shown. Values = state and dict state_attributes."
        }
      },
      "camera": {
        "title": "Carousel helper",
        "data": {
          "name": "Camera carousel name",
          "entity_ids": "Entities this camera tracks",
          "icon": "Icon",
          "rotate_every_minutes": "Rotate cameras every minutes",
          "listen_to_timer_trigger": "Or use a Timer helper as rotate trigger",
          "restart_timer": "Restart Timer helper automatic"
        },
        "data_description": {
          "icon": "If icon is not filled out, the icon from the tracked entities is used."
        }
      }
    }
  },
  "options": {
    "abort": {
      "already_configured": "Device is already configured"
    },
    "error": {
      "missing_selection": "No entities selected",
      "same_master": "Master interval trigger is the same as current entity",
      "unknown": "Unexpected error"
    },
    "step": {
      "binary_sensor": {
        "data": {
          "name": "Binary sensor name",
          "entity_ids": "Entities this binary sensor tracks",
          "icon": "Icon",
          "rotate_every_minutes": "Rotate binary sensors every minutes",
          "listen_to_timer_trigger": "Or use a Timer helper as rotate trigger",
          "restart_timer": "Restart Timer helper automatic",
          "show_if_template": "Show if template"
        },
        "data_description": {
          "icon": "If icon is not filled out, the icon from the tracked entities is used.",
          "show_if_template": "If the entities has the same state/attribute type, a template can be used to decide if current entity should be shown. Values = state and dict state_attributes."
        }
      },
      "sensor": {
        "data": {
          "name": "Sensor name",
          "entity_ids": "Entities this sensor tracks",
          "icon": "Icon",
          "rotate_every_minutes": "Rotate sensors every minutes",
          "listen_to_timer_trigger": "Or use a Timer helper as rotate trigger",
          "restart_timer": "Restart Timer helper automatic",
          "show_if_template": "Show if template"
        },
        "data_description": {
          "icon": "If icon is not filled out, the icon from the tracked entities is used.",
          "show_if_template": "If the entities has the same state/attribute type, a template can be used to decide if current entity should be shown. Values = state and dict state_attributes."
        }
      },
      "camera": {
        "data": {
          "name": "Camera name",
          "entity_ids": "Entities this camera tracks",
          "icon": "Icon",
          "rotate_every_minutes": "Rotate cameras every minutes",
          "listen_to_timer_trigger": "Or use a Timer helper as rotate trigger",
          "restart_timer": "Restart Timer helper automatic"
        },
        "data_description": {
          "icon": "If icon is not filled out, the icon from the tracked entities is used."
        }
      }
    }
  },
  "device_automation": {
    "trigger_type": {
      "starting_over": "Carousel starting over"
    }
  },
  "issues": {
    "missing_entity": {
      "description": "It looks like either entity `{entity}` has been deleted or renamed, which are used in Carousel helper `{carousel_helper}`. \n\n Please fix this problem.",
      "title": "Carousel helper: Entity deleted or renamed"
    },
    "missing_timer_entity": {
      "description": "It looks like either the Timer helper `{timer_entity}` has been deleted or renamed for use in Carousel helper `{entity}`. \n\n Please fix this problem.",
      "title": "Carousel helper: Timer helper deleted or renamed"
    },
    "template_error": {
      "description": "Rendering show if template `{template}` in Carousel helper `{carousel_helper}` ends in error.\nError: `{error_txt}` \n\n Please fix this problem.",
      "title": "Carousel helper: Template error"
    }
  },
  "services": {
    "sensor_add": {
      "description": "Add sensor to carousel.",
      "name": "Add",
      "fields": {
        "add_entity_id": {
          "description": "Add sensor to carousel.",
          "name": "Sensor"
        },
        "show_x_times": {
          "description": "Show sensor x times before removing.",
          "name": "Show"
        },
        "show_for": {
          "description": "Show sensor for duration before removing.",
          "name": "Show for"
        }
      }
    },
    "sensor_show_next": {
      "description": "Show next sensor.",
      "name": "Show next sensor"
    },
    "sensor_show_prev": {
      "description": "Show previous sensor.",
      "name": "Show previous sensor"
    },
    "sensor_remove": {
      "description": "Remove sensor from carousel.",
      "name": "Remove sensor",
      "fields": {
        "remove_entity_id": {
          "description": "Sensor to remove.",
          "name": "Sensor"
        }
      }
    },
    "sensor_show_entity": {
      "description": "Show sensor in carousel.",
      "name": "Show sensor",
      "fields": {
        "show_entity_id": {
          "description": "Sensor to show.",
          "name": "Sensor"
        }
      }
    },
    "binary_sensor_add": {
      "description": "Add binary sensor to carousel.",
      "name": "Add",
      "fields": {
        "add_entity_id": {
          "description": "Add binary sensor to carousel.",
          "name": "Binary sensor"
        },
        "show_x_times": {
          "description": "Show binary sensor x times before removing.",
          "name": "Show"
        },
        "show_for": {
          "description": "Show binary sensor for duration before removing.",
          "name": "Show for"
        }
      }
    },
    "binary_sensor_show_next": {
      "description": "Show next binary sensor.",
      "name": "Show next binary sensor"
    },
    "binary_sensor_show_prev": {
      "description": "Show previous binary sensor.",
      "name": "Show previous binary sensor"
    },
    "binary_sensor_remove": {
      "description": "Remove binary sensor from carousel.",
      "name": "Remove binary sensor",
      "fields": {
        "remove_entity_id": {
          "description": "Sensor to remove.",
          "name": "Sensor"
        }
      }
    },
    "binary_sensor_show_entity": {
      "description": "Show binary sensor in carousel.",
      "name": "Show binary sensor",
      "fields": {
        "show_entity_id": {
          "description": "Binary sensor to show.",
          "name": "Binary sensor"
        }
      }
    }
  }
}
